-------------------------------------------------------------------------------
-- Descriptive metadata
-------------------------------------------------------------------------------

componentName = "SDRAM Controller"
componentFullName = ""
alternativeNames = { }
componentDescription = "Offers an SDRAM memory controller component using only 20 pins and runnnig in excess of 70 MBytes/sec"
componentVersion = "1v0"

-------------------------------------------------------------------------------
-- Parameter descriptions.
-------------------------------------------------------------------------------

configPoints =
{
  sdram_target =
  {
    short   = "SDRAM target",
    long    = "",
    help    = "This specifies the target",
    define  = "SDRAM_DEFAULT_IMPLEMENTATION",
    options = {"PINOUT_V1_IS42S16400F", "PINOUT_V1_IS42S16160D", "PINOUT_V0"}, 
    resourceUsageFlags = {"noeffect"},
    default = "PINOUT_V1_IS42S16400F"
  },
  enable_wait_until_idle =
  {
    short   = "Enable wait until idle",
    long    = "",
    help    = "Enables the wait until the sdram becomes idle command",
    units   = "",
    define  = "SDRAM_ENABLE_CMD_WAIT_UNTIL_IDLE",
    type    = "string",
    resourceUsageFlags = {"noeffect"},
    default = true
  },
  enable_buffer_read =
  {
    short   = "Enable buffer read",
    long    = "",
    help    = "Enables the ability to read an arbitrary size buffer from SDRAM",
    units   = "",
    define  = "SDRAM_ENABLE_CMD_BUFFER_READ",
    type    = "bool",
    resourceUsageFlags = {"noeffect"},
    default = true
  },
  enable_buffer_write =
  {
    short   = "Enable buffer write",
    long    = "",
    help    = "Enables the ability to write an arbitrary size buffer to SDRAM",
    units   = "",
    define  = "SDRAM_ENABLE_CMD_BUFFER_WRITE",
    type    = "bool",
    resourceUsageFlags = {"noeffect"},
    default = true
  },
  enable_full_row_read =
  {
    short   = "Enable full row read",
    long    = "",
    help    = "Enables the ability to read a full row at once from SDRAM",
    units   = "",
    define  = "SDRAM_ENABLE_CMD_FULL_ROW_READ",
    type    = "bool",
    resourceUsageFlags = {"noeffect"},
    default = true
  },
  enable_full_row_write =
  {
    short   = "Enable full row write",
    long    = "",
    help    = "Enables the ability to read a full row at once from SDRAM",
    units   = "",
    define  = "SDRAM_ENABLE_CMD_FULL_ROW_WRITE",
    type    = "bool",
    resourceUsageFlags = {"noeffect"},
    default = true
  }

}

derivedValues = {}

ports = {
  p_sdram_adq = {
    short   = "sdram_adq",
    long    = "Combined SDRAM Address/Data Bus",
    help    = "",
    width   = 16
  },
  p_sdram_cas = {
    short   = "sdram_cas",
    long    = "Column Address Strobe",
    help    = "",
    width   = 1
  },
  p_sdram_ras = {
    short   = "sdram_ras",
    long    = "Row Address Strobe",
    help    = "",
    width   = 1
  },
  p_sdram_cas = {
    short   = "sdram_we",
    long    = "Sdram Write Enable",
    help    = "",
    width   = 1
  },
  p_sdram_clk = {
    short   = "sdram_clk",
    long    = "Sdram Clock",
    help    = "",
    width   = 1
  },
}

channels = {
  c_sdram_client = {
    short = "SDRAM Client channel",
    long  = "Channel for the client to exchange commands and data with the SDRAM Controller,
    help  = "",
  },
}    

function getConfigStatus()
  local status = "Trusted Configuration"
  local issues = {}
  if swblock.params.clock_divider == 1 or swblock.params.enable_cmd_full_row_read == 2 then
    status = "FIXME"  
  end
  return status, issues
end
            
-------------------------------------------------------------------------------
-- Source generation functions
-------------------------------------------------------------------------------

generatedCode = {
  includes = {"sdram.h"},
  globals = {},
  body = {}
}



